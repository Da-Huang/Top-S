string __mul(const string &num, char p) {
  int c = 0;
  string res;
  for (int i = 0; i < (int) num.size(); i ++) {
    int part = (p - '0') * (num[i] - '0') + c;
    res.push_back(part % 10 + '0');
    c = part / 10;
  }
  if ( c ) res.push_back(c + '0');
  return res;
}

void __add(string &sum, const string &a, int i) {
  int j = 0;
  int c = 0;
  const int N = sum.length();
  const int M = a.length();
  while ( i < N && j < M ) {
    int part = sum[i] - '0' + a[j] - '0' + c;
    sum[i] = part % 10 + '0';
    c = part / 10;
    i ++;
    j ++;
  }
  while ( j < M ) {
    int part = a[j] - '0' + c;
    sum.push_back(part % 10 + '0');
    c = part / 10;
    j ++;
  }
  while ( i < N ) {
    int part = sum[i] - '0' + c;
    sum[i] = part % 10 + '0';
    c = part / 10;
    i ++;
  }
  if ( c ) sum.push_back(c + '0');
}

string multiply(string num1, string num2) {
  if ( num1 == "0" || num2 == "0" ) return "0";
  reverse(num1.begin(), num1.end());
  reverse(num2.begin(), num2.end());
  string res;
  const int N = num1.length();
  const int M = num2.length();
  for (int j = 0; j < M; j ++) {
    string item = __mul(num1, num2[j]);
    __add(res, item, j);
  }
  reverse(res.begin(), res.end());
  return res;
}

